%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 15.1 (Build 24B83) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
1 42 m
116.49975 42 l
124.50775 42 130.99976 35.508121 130.99976 27.500019 c
130.99976 1.00002 l
15.49995 1.00002 l
7.4918699 1.00002 1 7.4918199 1 15.50002 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
131.99976 43 l
131.99976 0.00002000 l
0 0.00002000 l
h
f
Q
0.67450982 0.67450982 0.67450982 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.49975 0 l
123.50775 0 129.99976 6.4918799 129.99976 14.49998 c
129.99976 40.999981 l
14.49995 40.999981 l
6.4918699 40.999981 0 34.508179 0 26.499981 c
0 0 l
h
S
Q
1 1 1 sc
q
34.420952 18.34532 m
30.90785 15.50042 25.88365 15.50042 22.37055 18.34532 c
23.728849 20.02272 l
26.449949 17.81922 30.341551 17.81922 33.062649 20.02272 c
34.420952 18.34532 l
h
W
0 0 132 43 rc
21.37055 21.02272 m
35.420952 21.02272 l
35.420952 14.50042 l
21.37055 14.50042 l
h
f
Q
q
23.833651 22.038919 2.1584001 2.9159 rc
22.833651 25.954821 m
26.99205 25.954821 l
26.99205 21.038919 l
22.833651 21.038919 l
h
f
Q
q
30.53125 22.038919 2.1584001 2.9159 rc
29.53125 25.954821 m
33.689651 25.954821 l
33.689651 21.038919 l
29.53125 21.038919 l
h
f
Q
q
27.985149 9.3828201 m
34.422649 9.3828201 39.641251 14.60142 39.641251 21.038919 c
39.641251 27.47632 34.422649 32.69492 27.985149 32.69492 c
21.547649 32.69492 16.32905 27.47632 16.32905 21.038919 c
16.32905 14.60142 21.547649 9.3828201 27.985149 9.3828201 c
h
27.985149 11.54122 m
33.230549 11.54122 37.48275 15.79352 37.48275 21.038919 c
37.48275 26.284321 33.230549 30.53652 27.985149 30.53652 c
22.73975 30.53652 18.487551 26.284321 18.487551 21.038919 c
18.487551 15.79352 22.73975 11.54122 27.985149 11.54122 c
h
W*
0 0 132 43 rc
15.32905 33.69492 m
40.641251 33.69492 l
40.641251 8.3828201 l
15.32905 8.3828201 l
h
f
Q
q
82.212852 10.29352 m
84.186447 10.29352 85.64595 11.10602 86.591454 12.73092 c
87.28875 13.93642 87.637352 15.40772 87.637352 17.14502 c
87.637352 17.830521 87.554649 18.55142 87.389153 19.30772 c
87.223747 20.064119 86.913452 20.767321 86.45845 21.41732 c
85.891251 22.220921 85.149651 22.77342 84.233749 23.07472 c
83.696053 23.25202 83.022346 23.346621 82.212852 23.358419 c
76.58445 23.358419 l
76.58445 10.29352 l
82.212852 10.29352 l
h
81.751953 21.089319 m
82.992851 21.089319 83.823051 20.734819 84.242554 20.025721 c
84.65625 19.31072 84.863052 18.28842 84.863052 16.95892 c
84.863052 15.99572 84.724152 15.16552 84.446449 14.46822 c
83.938248 13.19782 83.040154 12.56252 81.751953 12.56252 c
79.23465 12.56252 l
79.23465 21.089319 l
81.751953 21.089319 l
h
W*
0 0 132 43 rc
75.58445 24.358419 m
88.637352 24.358419 l
88.637352 9.29352 l
75.58445 9.29352 l
h
f
Q
q
68.598152 11.38362 m
69.130051 11.97452 69.428452 12.55662 69.493446 13.12982 c
66.914146 13.12982 l
66.778252 12.84612 66.621651 12.62452 66.444351 12.46502 c
66.119347 12.16952 65.696854 12.02182 65.176849 12.02182 c
64.686348 12.02182 64.266853 12.14302 63.918251 12.38522 c
63.345051 12.77522 63.040749 13.45482 63.005249 14.42392 c
69.617447 14.42392 l
69.629349 15.25702 69.602753 15.89522 69.53775 16.338421 c
69.425453 17.094721 69.180252 17.75952 68.802048 18.33272 c
68.382553 18.982719 67.850647 19.45842 67.20665 19.75972 c
66.562553 20.061119 65.838654 20.211821 65.035049 20.211821 c
63.68185 20.211821 62.579849 19.765619 61.728951 18.873421 c
60.883949 17.981119 60.461449 16.69882 60.461449 15.02662 c
60.461449 13.24202 60.931149 11.95392 61.87075 11.16212 c
62.810249 10.37022 63.89455 9.9743204 65.12365 9.9743204 c
66.612747 9.9743204 67.77095 10.44412 68.598152 11.38362 c
h
66.382248 17.605921 m
66.74865 17.26322 66.952553 16.757919 66.993851 16.090219 c
63.067348 16.090219 l
63.150051 16.716619 63.350948 17.212919 63.670052 17.579321 c
63.995049 17.94562 64.45005 18.12882 65.035049 18.12882 c
65.572746 18.12882 66.021851 17.954519 66.382248 17.605921 c
h
W*
0 0 132 43 rc
59.461449 21.211821 m
70.629349 21.211821 l
70.629349 8.9743204 l
59.461449 8.9743204 l
h
f
Q
q
54.67355 18.08452 m
53.81675 18.08452 53.228851 17.721121 52.909752 16.99432 c
52.744251 16.61022 52.661549 16.11972 52.661549 15.52292 c
52.661549 10.29342 l
50.144249 10.29342 l
50.144249 19.937019 l
52.581749 19.937019 l
52.581749 18.527719 l
52.90675 19.024019 53.21405 19.381519 53.503551 19.60022 c
54.023548 19.990219 54.682449 20.185221 55.480148 20.185221 c
56.478748 20.185221 57.29425 19.92222 57.926552 19.39632 c
58.564651 18.87632 58.883751 18.01062 58.883751 16.79932 c
58.883751 10.29342 l
56.29565 10.29342 l
56.29565 16.170019 l
56.29565 16.67812 56.22765 17.068119 56.091751 17.33992 c
55.843552 17.836321 55.37085 18.08452 54.67355 18.08452 c
h
W
0 0 132 43 rc
49.144249 21.185221 m
59.883751 21.185221 l
59.883751 9.2934198 l
49.144249 9.2934198 l
h
f
Q
q
89.489754 10.29352 2.7121999 13.0649 rc
88.489754 24.358419 m
93.20195 24.358419 l
93.20195 9.29352 l
88.489754 9.29352 l
h
f
Q
q
71.195648 34.674191 m
72.193451 33.253731 l
73.127251 33.253731 l
74.129951 34.674191 l
73.323952 34.674191 l
72.660347 33.730492 l
71.996849 34.674191 l
71.195648 34.674191 l
h
W
0 0 132 43 rc
70.195648 35.674191 m
75.129951 35.674191 l
75.129951 32.253731 l
70.195648 32.253731 l
h
f
Q
q
71.505348 28.264919 m
71.384048 28.42222 71.310349 28.648319 71.284149 28.94322 c
70.433853 28.94322 l
70.456749 28.418921 70.630447 27.97822 70.954849 27.621019 c
71.282448 27.26712 71.837952 27.090219 72.621048 27.090219 c
73.34845 27.090219 73.889153 27.26062 74.24305 27.601419 c
74.600151 27.94212 74.778748 28.346821 74.778748 28.81542 c
74.778748 29.30032 74.60675 29.65592 74.26265 29.882021 c
74.046448 30.026119 73.620453 30.17522 72.984749 30.32922 c
72.399849 30.471821 l
72.144249 30.534019 71.950951 30.606119 71.819847 30.688021 c
71.59375 30.82572 71.480751 31.00922 71.480751 31.23852 c
71.480751 31.448219 71.565948 31.61702 71.736351 31.74482 c
71.90995 31.87262 72.163948 31.93652 72.498154 31.93652 c
72.99955 31.93652 73.351753 31.82012 73.554947 31.587521 c
73.679451 31.423719 73.749847 31.241819 73.766251 31.04192 c
74.601852 31.04192 l
74.608353 31.382721 74.501846 31.70052 74.282349 31.99542 c
73.931747 32.46072 73.359947 32.69342 72.566948 32.69342 c
71.960747 32.69342 71.477448 32.539421 71.11705 32.231419 c
70.75985 31.92342 70.581253 31.520321 70.581253 31.02232 c
70.581253 30.599621 70.771347 30.26862 71.151451 30.029421 c
71.364449 29.891821 71.695351 29.767321 72.144249 29.65592 c
72.847153 29.47892 l
73.223953 29.383921 73.47625 29.30032 73.60405 29.228319 c
73.803947 29.110319 73.903847 28.93832 73.903847 28.712219 c
73.903847 28.414021 73.77935 28.19282 73.53035 28.04862 c
73.281349 27.907721 72.99295 27.83732 72.665253 27.83732 c
72.114754 27.83732 71.728149 27.97982 71.505348 28.264919 c
h
W
0 0 132 43 rc
69.433853 33.69342 m
75.778748 33.69342 l
75.778748 26.090219 l
69.433853 26.090219 l
h
f
Q
q
83.802849 27.98962 m
86.92395 31.76442 l
84.033852 31.76442 l
84.033852 32.55582 l
88.113449 32.55582 l
88.113449 31.83322 l
85.011948 28.083019 l
88.206749 28.083019 l
88.206749 27.291719 l
83.802849 27.291719 l
83.802849 27.98962 l
h
W
0 0 132 43 rc
82.802849 33.55582 m
89.206749 33.55582 l
89.206749 26.291719 l
82.802849 26.291719 l
h
f
Q
q
84.682648 34.674191 m
85.68045 33.253731 l
86.61425 33.253731 l
87.616951 34.674191 l
86.810951 34.674191 l
86.147346 33.730492 l
85.483849 34.674191 l
84.682648 34.674191 l
h
W
0 0 132 43 rc
83.682648 35.674191 m
88.616951 35.674191 l
88.616951 32.253731 l
83.682648 32.253731 l
h
f
Q
q
99.737549 32.708118 m
100.41575 32.708118 100.98975 32.482021 101.45775 32.029919 c
101.92675 31.577721 102.16075 30.912519 102.16075 30.034321 c
102.16075 29.18572 101.95475 28.484421 101.54175 27.930719 c
101.12875 27.376921 100.48775 27.100019 99.619652 27.100019 c
98.895447 27.100019 98.32045 27.34412 97.894447 27.83242 c
97.468452 28.323919 97.255447 28.982519 97.255447 29.80822 c
97.255447 30.692921 97.47995 31.397421 97.928848 31.921721 c
98.377747 32.446018 98.980652 32.708118 99.737549 32.708118 c
h
99.703148 27.861919 m
100.28975 27.861919 100.69075 28.083019 100.90775 28.525419 c
101.12675 28.97102 101.23675 29.46582 101.23675 30.00972 c
101.23675 30.50132 101.15775 30.90102 101.00075 31.209021 c
100.75175 31.694019 100.32275 31.93652 99.713051 31.93652 c
99.172348 31.93652 98.779152 31.730021 98.533348 31.317221 c
98.287651 30.90432 98.164749 30.406219 98.164749 29.823021 c
98.164749 29.26272 98.287651 28.795719 98.533348 28.42222 c
98.779152 28.04862 99.169052 27.861919 99.703148 27.861919 c
h
W*
0 0 132 43 rc
96.255447 33.708118 m
103.16075 33.708118 l
103.16075 26.100019 l
96.255447 26.100019 l
h
f
Q
q
115.17075 28.264919 m
115.04975 28.42222 114.97575 28.648319 114.94975 28.94322 c
114.09975 28.94322 l
114.12275 28.418921 114.29575 27.97822 114.62075 27.621019 c
114.94775 27.26712 115.50375 27.090219 116.28675 27.090219 c
117.01375 27.090219 117.55475 27.26062 117.90875 27.601419 c
118.26575 27.94212 118.44475 28.346821 118.44475 28.81542 c
118.44475 29.30032 118.27275 29.65592 117.92875 29.882021 c
117.71175 30.026119 117.28575 30.17522 116.65075 30.32922 c
116.06575 30.471821 l
115.80975 30.534019 115.61675 30.606119 115.48575 30.688021 c
115.25975 30.82572 115.14675 31.00922 115.14675 31.23852 c
115.14675 31.448219 115.23175 31.61702 115.40175 31.74482 c
115.57575 31.87262 115.82975 31.93652 116.16375 31.93652 c
116.66475 31.93652 117.01775 31.82012 117.22075 31.587521 c
117.34475 31.423719 117.41575 31.241819 117.43175 31.04192 c
118.26775 31.04192 l
118.27375 31.382721 118.16775 31.70052 117.94775 31.99542 c
117.59775 32.46072 117.02575 32.69342 116.23275 32.69342 c
115.62675 32.69342 115.14275 32.539421 114.78275 32.231419 c
114.42575 31.92342 114.24675 31.520321 114.24675 31.02232 c
114.24675 30.599621 114.43675 30.26862 114.81675 30.029421 c
115.02975 29.891821 115.36075 29.767321 115.80975 29.65592 c
116.51275 29.47892 l
116.88975 29.383921 117.14175 29.30032 117.26975 29.22822 c
117.46975 29.110319 117.56975 28.93832 117.56975 28.712219 c
117.56975 28.414021 117.44475 28.19282 117.19575 28.04862 c
116.94675 27.907721 116.65875 27.83732 116.33075 27.83732 c
115.78075 27.83732 115.39375 27.97982 115.17075 28.264919 c
h
W
0 0 132 43 rc
113.09975 33.69342 m
119.44475 33.69342 l
119.44475 26.090219 l
113.09975 26.090219 l
h
f
Q
q
109.02175 27.90122 m
108.87475 28.16992 108.80075 28.528721 108.80075 28.977619 c
108.80075 32.55582 l
109.70575 32.55582 l
109.70575 29.061119 l
109.70575 28.792419 109.74775 28.57292 109.83275 28.402519 c
109.99075 28.087919 110.28375 27.930719 110.71275 27.930719 c
111.32875 27.930719 111.74875 28.205919 111.97075 28.75642 c
112.09275 29.051319 112.15275 29.45602 112.15275 29.970421 c
112.15275 32.55582 l
113.03775 32.55582 l
113.03775 27.291719 l
112.20275 27.291719 l
112.21175 28.068319 l
112.09775 27.86842 111.95475 27.69972 111.78475 27.562019 c
111.44675 27.286819 111.03775 27.14922 110.55575 27.14922 c
109.80575 27.14922 109.29375 27.39982 109.02175 27.90122 c
h
W
0 0 132 43 rc
107.80075 33.55582 m
114.03775 33.55582 l
114.03775 26.14922 l
107.80075 26.14922 l
h
f
Q
q
105.07575 32.64922 m
105.48775 32.64922 105.84875 32.547619 106.15675 32.344421 c
106.32375 32.229721 106.49375 32.062618 106.66775 31.843121 c
106.66775 32.506618 l
107.48375 32.506618 l
107.48375 27.71932 l
107.48375 27.05092 107.38575 26.523319 107.18875 26.136721 c
106.82175 25.422319 106.12875 25.06522 105.10975 25.06522 c
104.54275 25.06522 104.06575 25.19302 103.67975 25.448521 c
103.29275 25.70092 103.07675 26.097321 103.03075 26.63802 c
103.92975 26.63802 l
103.97275 26.402121 104.05775 26.220221 104.18575 26.092421 c
104.38575 25.895821 104.69975 25.79752 105.12975 25.79752 c
105.80775 25.79752 106.25175 26.03672 106.46175 26.51512 c
106.58575 26.796921 106.64375 27.299919 106.63375 28.02412 c
106.45675 27.755421 106.24375 27.555519 105.99475 27.424419 c
105.74575 27.29332 105.41575 27.227819 105.00675 27.227819 c
104.43675 27.227819 103.93675 27.429319 103.50775 27.83242 c
103.08175 28.23872 102.86875 28.908819 102.86875 29.842621 c
102.86875 30.724119 103.08275 31.41222 103.51275 31.907021 c
103.94475 32.401821 104.46575 32.64922 105.07575 32.64922 c
h
106.66775 29.945921 m
106.66775 30.597919 106.53375 31.081221 106.26475 31.395821 c
105.99575 31.710421 105.65375 31.86772 105.23775 31.86772 c
104.61475 31.86772 104.18875 31.576019 103.95975 30.992821 c
103.83875 30.68152 103.77775 30.27352 103.77775 29.768921 c
103.77775 29.175819 103.89775 28.723619 104.13675 28.412319 c
104.37875 28.104321 104.70375 27.950319 105.10975 27.950319 c
105.74575 27.950319 106.19275 28.23702 106.45175 28.81052 c
106.59575 29.13492 106.66775 29.513321 106.66775 29.945921 c
h
W*
0 0 132 43 rc
101.86875 33.64922 m
108.48375 33.64922 l
108.48375 24.06522 l
101.86875 24.06522 l
h
f
Q
q
90.674149 32.37392 m
90.503754 32.25592 90.313751 32.06752 90.10405 31.80872 c
90.10405 32.55582 l
89.229149 32.55582 l
89.229149 27.291719 l
90.113853 27.291719 l
90.113853 30.083521 l
90.113853 30.76182 90.249847 31.23032 90.521751 31.48922 c
90.79705 31.748119 91.101753 31.87752 91.43605 31.87752 c
91.802948 31.87752 92.05365 31.75462 92.188049 31.508921 c
92.273247 31.34502 92.315849 31.08452 92.315849 30.727421 c
92.315849 27.291719 l
93.215248 27.291719 l
93.215248 30.353821 l
93.215248 30.89772 93.339752 31.28602 93.588852 31.518721 c
93.841148 31.75132 94.140953 31.86772 94.488251 31.86772 c
94.740547 31.86772 94.953552 31.80212 95.127251 31.67112 c
95.304153 31.54002 95.392647 31.29912 95.392647 30.948521 c
95.392647 27.291719 l
96.311752 27.291719 l
96.311752 30.796221 l
96.311752 31.26152 96.24295 31.63172 96.105347 31.907021 c
95.849747 32.418121 95.36805 32.673721 94.660347 32.673721 c
94.329353 32.673721 94.031151 32.604919 93.765747 32.467319 c
93.500351 32.33292 93.269348 32.12492 93.072746 31.843121 c
92.95475 32.072418 92.823647 32.24612 92.67955 32.36412 c
92.42395 32.570518 92.086449 32.673721 91.667053 32.673721 c
91.296753 32.673721 90.965752 32.573818 90.674149 32.37392 c
h
W
0 0 132 43 rc
88.229149 33.673721 m
97.311752 33.673721 l
97.311752 26.291719 l
88.229149 26.291719 l
h
f
Q
q
77.983452 32.673721 m
78.356949 32.673721 78.719048 32.58532 79.069649 32.408321 c
79.42025 32.234619 79.687248 32.008621 79.87075 31.730021 c
80.047752 31.464621 80.165749 31.15502 80.224648 30.801121 c
80.277153 30.55862 80.303352 30.171921 80.303352 29.641121 c
76.444946 29.641121 l
76.461349 29.107019 76.587547 28.67782 76.823448 28.35342 c
77.059349 28.032221 77.424751 27.871719 77.919548 27.871719 c
78.381554 27.871719 78.750153 28.02412 79.025452 28.328819 c
79.182648 28.50572 79.294052 28.71052 79.35965 28.94322 c
80.229553 28.94322 l
80.20665 28.749821 80.129646 28.533621 79.99855 28.29442 c
79.87075 28.058519 79.726646 27.86512 79.566048 27.71442 c
79.297348 27.45232 78.964752 27.27532 78.568253 27.18362 c
78.355347 27.131121 78.114449 27.104919 77.845749 27.104919 c
77.190453 27.104919 76.635048 27.34252 76.17955 27.817619 c
75.724052 28.296021 75.496353 28.96452 75.496353 29.823021 c
75.496353 30.668421 75.725754 31.35482 76.184448 31.88242 c
76.64325 32.410019 77.242851 32.673721 77.983452 32.673721 c
h
79.394051 30.344021 m
79.357948 30.727421 79.274452 31.03372 79.143349 31.263121 c
78.900848 31.689119 78.496246 31.902121 77.929352 31.902121 c
77.523048 31.902121 77.182251 31.75462 76.906952 31.459721 c
76.631752 31.168119 76.485947 30.796221 76.469551 30.344021 c
79.394051 30.344021 l
h
W*
0 0 132 43 rc
74.496353 33.673721 m
81.303352 33.673721 l
81.303352 26.104919 l
74.496353 26.104919 l
h
f
Q
q
67.97625 30.481621 m
68.179451 30.50782 68.315453 30.593019 68.384247 30.737221 c
68.423553 30.815821 68.443253 30.928921 68.443253 31.076321 c
68.443253 31.377819 68.335052 31.59572 68.118851 31.730021 c
67.905853 31.86772 67.599449 31.93652 67.199654 31.93652 c
66.737648 31.93652 66.410049 31.81192 66.216652 31.56292 c
66.108551 31.42532 66.038048 31.22052 66.005348 30.948521 c
65.17955 30.948521 l
65.195953 31.597321 65.405647 32.04792 65.808746 32.30022 c
66.21505 32.55582 66.685249 32.68362 67.219353 32.68362 c
67.838654 32.68362 68.341652 32.56562 68.728249 32.32972 c
69.111649 32.093719 69.303352 31.72682 69.303352 31.22872 c
69.303352 28.196119 l
69.303352 28.104321 69.32135 28.030621 69.357452 27.97492 c
69.396751 27.91922 69.477051 27.891319 69.598251 27.891319 c
69.63755 27.891319 69.681847 27.893021 69.730949 27.89632 c
69.780151 27.902821 69.83255 27.91102 69.888252 27.92082 c
69.888252 27.26712 l
69.750648 27.227819 69.645752 27.20322 69.573647 27.19342 c
69.501549 27.18362 69.403252 27.17872 69.278748 27.17872 c
68.974052 27.17872 68.752853 27.286819 68.61525 27.50312 c
68.543152 27.61772 68.492348 27.779921 68.462852 27.98962 c
68.282654 27.753719 68.02375 27.54892 67.686249 27.37532 c
67.348747 27.20162 66.976852 27.11482 66.570549 27.11482 c
66.082352 27.11482 65.682549 27.26222 65.371246 27.557119 c
65.063248 27.85532 64.909248 28.227221 64.909248 28.672819 c
64.909248 29.161119 65.061653 29.53952 65.366348 29.80822 c
65.671051 30.07692 66.070847 30.24242 66.565651 30.30472 c
67.97625 30.481621 l
h
65.833252 28.69252 m
65.833252 28.43692 65.926651 28.23542 66.113449 28.087919 c
66.300247 27.940519 66.521446 27.866819 66.776947 27.866819 c
67.088249 27.866819 67.389748 27.938919 67.681351 28.083019 c
68.172852 28.32222 68.418648 28.71382 68.418648 29.257721 c
68.418648 29.970421 l
68.310547 29.901621 68.171249 29.84432 68.000847 29.79842 c
67.830452 29.75252 67.663353 29.71982 67.49955 29.700121 c
66.963753 29.631321 l
66.642647 29.58872 66.401848 29.521521 66.241249 29.429819 c
65.969254 29.27582 65.833252 29.03002 65.833252 28.69252 c
h
W*
0 0 132 43 rc
63.909248 33.68362 m
70.888252 33.68362 l
70.888252 26.11482 l
63.909248 26.11482 l
h
f
Q
q
63.071049 31.30732 m
62.831848 31.02232 62.71225 30.692921 62.71225 30.31942 c
62.71225 27.291719 l
61.82745 27.291719 l
61.82745 32.55582 l
62.66795 32.55582 l
62.66795 31.646521 l
62.736752 31.82342 62.905548 32.038021 63.174252 32.290421 c
63.442951 32.545921 63.752548 32.673721 64.103149 32.673721 c
64.119553 32.673721 64.147453 32.672119 64.186752 32.668819 c
64.226051 32.66552 64.293251 32.659019 64.388252 32.64922 c
64.388252 31.715321 l
64.335854 31.725121 64.286652 31.73172 64.240852 31.734921 c
64.19825 31.73822 64.15065 31.73992 64.098251 31.73992 c
63.652649 31.73992 63.310249 31.59572 63.071049 31.30732 c
h
W
0 0 132 43 rc
60.82745 33.673721 m
65.388252 33.673721 l
65.388252 26.291719 l
60.82745 26.291719 l
h
f
Q
q
59.02095 30.481621 m
59.224152 30.50782 59.360149 30.593019 59.428951 30.737221 c
59.46825 30.815821 59.487949 30.928921 59.487949 31.076321 c
59.487949 31.377819 59.379749 31.59572 59.163551 31.730021 c
58.95055 31.86772 58.64415 31.93652 58.24435 31.93652 c
57.782349 31.93652 57.45475 31.81192 57.261349 31.56292 c
57.153252 31.42532 57.082851 31.22052 57.050049 30.948521 c
56.224251 30.948521 l
56.24065 31.597321 56.450352 32.04792 56.853451 32.30022 c
57.25975 32.55582 57.72995 32.68362 58.26405 32.68362 c
58.88335 32.68362 59.386349 32.56562 59.772949 32.32972 c
60.156349 32.093719 60.348049 31.72682 60.348049 31.22872 c
60.348049 28.196119 l
60.348049 28.104321 60.366051 28.030621 60.402149 27.97492 c
60.441448 27.91922 60.521751 27.891319 60.642948 27.891319 c
60.682251 27.891319 60.726551 27.893021 60.77565 27.89632 c
60.824848 27.902821 60.877251 27.91102 60.932949 27.92082 c
60.932949 27.26712 l
60.795349 27.227819 60.690449 27.20322 60.618351 27.19342 c
60.546349 27.18362 60.447948 27.17872 60.323448 27.17872 c
60.018749 27.17872 59.79755 27.286819 59.65995 27.50312 c
59.587849 27.61772 59.537048 27.779921 59.507549 27.98962 c
59.327351 27.753719 59.068451 27.54892 58.730949 27.37532 c
58.393452 27.20162 58.021549 27.11482 57.61525 27.11482 c
57.127048 27.11482 56.727249 27.26222 56.415951 27.557119 c
56.107948 27.85532 55.953949 28.227221 55.953949 28.672819 c
55.953949 29.161119 56.10635 29.53952 56.411049 29.80822 c
56.715851 30.07692 57.115551 30.24242 57.610352 30.30472 c
59.02095 30.481621 l
h
56.878052 28.69252 m
56.878052 28.43692 56.971352 28.23542 57.15815 28.087919 c
57.344952 27.940519 57.566151 27.866819 57.821751 27.866819 c
58.13295 27.866819 58.434448 27.938919 58.726051 28.083019 c
59.217548 28.32222 59.463348 28.71382 59.463348 29.257721 c
59.463348 29.970421 l
59.355251 29.901621 59.21595 29.84432 59.045551 29.79842 c
58.875149 29.75252 58.70805 29.71982 58.54425 29.700121 c
58.00845 29.631321 l
57.687351 29.58872 57.446548 29.521521 57.28595 29.429819 c
57.01395 29.27582 56.878052 29.03002 56.878052 28.69252 c
h
W*
0 0 132 43 rc
54.953949 33.68362 m
61.932949 33.68362 l
61.932949 26.11482 l
54.953949 26.11482 l
h
f
Q
q
51.938351 27.37532 m
51.781052 27.473619 51.605751 27.642321 51.412449 27.881519 c
51.412449 25.19302 l
50.527748 25.19302 l
50.527748 32.531219 l
51.387852 32.531219 l
51.387852 31.83322 l
51.564751 32.072418 51.758148 32.257622 51.96785 32.388721 c
52.266048 32.58532 52.61665 32.68362 53.01965 32.68362 c
53.616051 32.68362 54.12225 32.45422 54.538448 31.99542 c
54.954552 31.54002 55.162651 30.88792 55.162651 30.039221 c
55.162651 28.89242 54.86285 28.073219 54.263149 27.58172 c
53.883049 27.27042 53.44075 27.11482 52.93615 27.11482 c
52.53965 27.11482 52.20705 27.20162 51.938351 27.37532 c
h
52.81815 27.886419 m
53.231049 27.886419 53.573448 28.058519 53.845348 28.402519 c
54.120651 28.749821 54.258251 29.26762 54.258251 29.955721 c
54.258251 30.37512 54.197651 30.735519 54.07645 31.03702 c
53.84705 31.61702 53.42765 31.907021 52.81815 31.907021 c
52.205349 31.907021 51.78595 31.60062 51.559849 30.987921 c
51.438648 30.660219 51.378052 30.24402 51.378052 29.73942 c
51.378052 29.33312 51.438648 28.987419 51.559849 28.70232 c
51.789249 28.158421 52.208649 27.886419 52.81815 27.886419 c
h
W*
0 0 132 43 rc
49.527748 33.68362 m
56.162651 33.68362 l
56.162651 24.19302 l
49.527748 24.19302 l
h
f
Q
q
77.560753 33.23407 0.91909999 1.0223401 rc
76.560753 35.256409 m
79.479851 35.256409 l
79.479851 32.23407 l
76.560753 32.23407 l
h
f
ep
end
%%Trailer
%%EOF
